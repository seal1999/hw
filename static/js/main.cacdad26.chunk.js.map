{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","email","password","isValidEmail","isValidPassword","emailGuide","passwordGuide","checkValid","value","name","isValid","guideMessage","console","log","includes","setState","length","match","handleChange","e","target","handleSubmit","preventDefault","alert","this","type","onChange","required","disabled","onClick","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oMA2GeA,E,4MAxGbC,MAAQ,CACNC,MAAO,GACPC,SAAU,GACVC,cAAc,EACdC,iBAAiB,EACjBC,WAAY,GACZC,cAAe,K,EAGjBC,WAAa,SAACC,EAAOC,GACnB,IAAIC,GAAU,EACVC,EAAe,GAEnB,OAAQF,GACN,IAAK,QACHG,QAAQC,IAAI,oBACRL,EAAMM,SAAS,MACjBJ,GAAU,EACVC,EAAe,KAEfD,GAAU,EACVC,EAAe,cAEjB,EAAKI,SAAS,CACZZ,aAAcO,EACdL,WAAYM,IAEd,MACF,IAAK,WACHC,QAAQC,IAAI,uBACRL,EAAMQ,OAAS,GACjBN,GAAU,EACVC,EAAe,eACNH,EAAMS,MAAM,UACrBP,GAAU,EACVC,EAAe,KAEfD,GAAU,EACVC,EAAe,6BAEjB,EAAKI,SAAS,CACZX,gBAAiBM,EACjBJ,cAAeK,IAEjB,MACF,QACEC,QAAQC,IAAI,wB,EAIlBK,aAAe,SAACC,GAAO,IAAD,EACIA,EAAEC,OAAlBZ,EADY,EACZA,MAAOC,EADK,EACLA,KACf,EAAKM,SAAL,eACGN,EAAOD,IAEV,EAAKD,WAAWC,EAAOC,I,EAGzBY,aAAe,SAACF,GACdA,EAAEG,iBACFC,MAAM,wB,uDAGE,IAAD,EACmCC,KAAKxB,MAAvCG,EADD,EACCA,aAAcC,EADf,EACeA,gBACtB,OACE,6BACE,2CACA,8BACE,6BACE,2BACEK,KAAK,QACLgB,KAAK,OACLjB,MAAOgB,KAAKxB,MAAMC,MAClByB,SAAUF,KAAKN,aACfS,UAAQ,KAERH,KAAKxB,MAAMG,cAAgB,+BAAQqB,KAAKxB,MAAMK,aAElD,6BACE,2BACEI,KAAK,WACLgB,KAAK,WACLjB,MAAOgB,KAAKxB,MAAME,SAClBwB,SAAUF,KAAKN,aACfS,UAAQ,KAERH,KAAKxB,MAAMI,iBACX,+BAAQoB,KAAKxB,MAAMM,gBAGvB,6BACE,4BACEsB,UAAWzB,IAAiBC,EAC5ByB,QAASL,KAAKH,cAFhB,iB,GA7FMS,aCUEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjB,MACvB,2DCZNkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.cacdad26.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass App extends Component {\n  state = {\n    email: \"\",\n    password: \"\",\n    isValidEmail: false,\n    isValidPassword: false,\n    emailGuide: \"\",\n    passwordGuide: \"A\",\n  };\n\n  checkValid = (value, name) => {\n    let isValid = false;\n    let guideMessage = \"\";\n\n    switch (name) {\n      case \"email\":\n        console.log(\"email validation\");\n        if (value.includes(\"@\")) {\n          isValid = true;\n          guideMessage = \"\";\n        } else {\n          isValid = false;\n          guideMessage = \"@ required\";\n        }\n        this.setState({\n          isValidEmail: isValid,\n          emailGuide: guideMessage,\n        });\n        break;\n      case \"password\":\n        console.log(\"password validation\");\n        if (value.length < 7) {\n          isValid = false;\n          guideMessage = \"min lenth 6\";\n        } else if (value.match(/[A-Z]/)) {\n          isValid = true;\n          guideMessage = \"\";\n        } else {\n          isValid = false;\n          guideMessage = \"uppercase letter required\";\n        }\n        this.setState({\n          isValidPassword: isValid,\n          passwordGuide: guideMessage,\n        });\n        break;\n      default:\n        console.log(\"sorry, wrong param\");\n    }\n  };\n\n  handleChange = (e) => {\n    const { value, name } = e.target;\n    this.setState({\n      [name]: value,\n    });\n    this.checkValid(value, name);\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    alert(\"좋았어~\");\n  };\n\n  render() {\n    const { isValidEmail, isValidPassword } = this.state;\n    return (\n      <div>\n        <h3>homework #1</h3>\n        <form>\n          <div>\n            <input\n              name=\"email\"\n              type=\"text\"\n              value={this.state.email}\n              onChange={this.handleChange}\n              required\n            />\n            {!this.state.isValidEmail && <label>{this.state.emailGuide}</label>}\n          </div>\n          <div>\n            <input\n              name=\"password\"\n              type=\"password\"\n              value={this.state.password}\n              onChange={this.handleChange}\n              required\n            />\n            {!this.state.isValidPassword && (\n              <label>{this.state.passwordGuide}</label>\n            )}\n          </div>\n          <div>\n            <button\n              disabled={!isValidEmail || !isValidPassword}\n              onClick={this.handleSubmit}\n            >\n              submit\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}